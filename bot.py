import os
import logging
import sqlite3
import re
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ç–æ–∫–µ–Ω –¢–û–õ–¨–ö–û –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

DB_NAME = "tasks.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_task = None

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            task_text TEXT,
            reminder_type TEXT,
            reminder_interval INTEGER,
            reminder_time TEXT,
            is_completed BOOLEAN DEFAULT FALSE,
            last_reminder_date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def add_task(user_id, task_text, reminder_type, reminder_interval=0, reminder_time=""):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tasks (user_id, task_text, reminder_type, reminder_interval, reminder_time)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, task_text, reminder_type, reminder_interval, reminder_time))
    conn.commit()
    conn.close()
    logger.info(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def get_user_tasks(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, task_text, reminder_type, reminder_interval, reminder_time, is_completed 
        FROM tasks 
        WHERE user_id = ? AND is_completed = FALSE
    ''', (user_id,))
    tasks = cursor.fetchall()
    conn.close()
    return tasks

def mark_task_completed(task_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('UPDATE tasks SET is_completed = TRUE WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()
    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")

def get_tasks_for_reminder():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime('%H:%M')
    current_date = now.strftime('%Y-%m-%d')
    
    cursor.execute('''
        SELECT id, user_id, task_text, reminder_type, reminder_interval, reminder_time, last_reminder_date 
        FROM tasks 
        WHERE is_completed = FALSE
    ''')
    tasks = cursor.fetchall()
    
    tasks_to_remind = []
    for task in tasks:
        task_id, user_id, task_text, reminder_type, interval, specific_time, last_reminder = task
        
        if reminder_type == 'specific_time':
            if current_time == specific_time and last_reminder != current_date:
                tasks_to_remind.append((task_id, user_id, task_text))
                cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                             (current_date, task_id))
        
        elif reminder_type == 'custom' and interval > 0:
            if last_reminder:
                try:
                    last_reminder_time = datetime.strptime(last_reminder, '%Y-%m-%d %H:%M:%S')
                    time_diff = (now - last_reminder_time).total_seconds() / 60
                    if time_diff >= interval:
                        tasks_to_remind.append((task_id, user_id, task_text))
                        cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                                     (now.strftime('%Y-%m-%d %H:%M:%S'), task_id))
                except ValueError:
                    pass
            else:
                cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                             (now.strftime('%Y-%m-%d %H:%M:%S'), task_id))
        
        elif reminder_type == 'once' and not last_reminder:
            tasks_to_remind.append((task_id, user_id, task_text))
            cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                         (now.strftime('%Y-%m-%d %H:%M:%S'), task_id))
    
    conn.commit()
    conn.close()
    return tasks_to_remind

# –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–µ–∑ JobQueue
async def send_reminders(application):
    while True:
        try:
            tasks = get_tasks_for_reminder()
            
            for task in tasks:
                task_id, user_id, task_text = task
                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n{task_text}\n\n/complete - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
                    )
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")
            
            # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(60)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ø–∏—Ä–∏–≤–µ—Ç–∞ {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –î—ã–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/addtask - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/mytasks - –ú–æ–∏ –∑–∞–¥–∞—á–∏\n"
        "/complete - –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/help - –ü–æ–º–æ—â—å"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
–ö–æ–º–∞–Ω–¥—ã:
/addtask - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/mytasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏  
/complete - –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
/help - –ü–æ–º–æ—â—å

–¢–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
üîî –û–¥–∏–Ω —Ä–∞–∑
üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å (–≤–≤–µ–¥–∏ –º–∏–Ω—É—Ç—ã)
üïê –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú)
üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """
    await update.message.reply_text(help_text)

async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîî –û–¥–∏–Ω —Ä–∞–∑", callback_data="reminder_once")],
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å", callback_data="reminder_custom")],
        [InlineKeyboardButton("üïê –í—Ä–µ–º—è", callback_data="reminder_time")],
        [InlineKeyboardButton("üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_none")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "reminder_once":
        context.user_data['reminder_type'] = "once"
        await query.edit_message_text("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑\n–ù–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:")
    
    elif data == "reminder_custom":
        context.user_data['reminder_type'] = "custom"
        await query.edit_message_text("–í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:")
    
    elif data == "reminder_time":
        context.user_data['reminder_type'] = "specific_time"
        await query.edit_message_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
    
    elif data == "reminder_none":
        context.user_data['reminder_type'] = "none"
        await query.edit_message_text("üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n–ù–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:")

async def handle_interval_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('reminder_type') == 'custom':
        try:
            interval = int(update.message.text)
            if interval > 0:
                context.user_data['reminder_interval'] = interval
                await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω\n–ù–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã):")
    
    elif context.user_data.get('reminder_type') == 'specific_time':
        time_pattern = r'^(\d{1,2}):(\d{2})$'
        time_match = re.match(time_pattern, update.message.text)
        
        if time_match:
            hours, minutes = int(time_match.group(1)), int(time_match.group(2))
            if 0 <= hours <= 23 and 0 <= minutes <= 59:
                context.user_data['reminder_time'] = f"{hours:02d}:{minutes:02d}"
                await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {hours:02d}:{minutes:02d}\n–ù–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:")

async def handle_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'reminder_type' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: /addtask")
        return
    
    task_text = update.message.text
    user_id = update.effective_user.id
    reminder_type = context.user_data['reminder_type']
    reminder_interval = context.user_data.get('reminder_interval', 0)
    reminder_time = context.user_data.get('reminder_time', "")
    
    add_task(user_id, task_text, reminder_type, reminder_interval, reminder_time)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    if reminder_type == "once":
        reminder_info = "üîî –û–¥–∏–Ω —Ä–∞–∑"
    elif reminder_type == "custom":
        reminder_info = f"üîÑ –ö–∞–∂–¥—ã–µ {reminder_interval} –º–∏–Ω"
    elif reminder_type == "specific_time":
        reminder_info = f"üïê –í {reminder_time}"
    else:
        reminder_info = "üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    context.user_data.clear()
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n{task_text}\n{reminder_info}")

async def my_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_user_tasks(user_id)
    
    if not tasks:
        await update.message.reply_text("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    
    tasks_text = "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for i, task in enumerate(tasks, 1):
        task_id, task_text, reminder_type, interval, specific_time, completed = task
        
        if reminder_type == "once":
            reminder_info = "üîî –û–¥–∏–Ω —Ä–∞–∑"
        elif reminder_type == "custom":
            reminder_info = f"üîÑ –ö–∞–∂–¥—ã–µ {interval} –º–∏–Ω"
        elif reminder_type == "specific_time":
            reminder_info = f"üïê –í {specific_time}"
        else:
            reminder_info = "üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        tasks_text += f"{i}. {task_text}\n   {reminder_info}\n\n"
    
    await update.message.reply_text(tasks_text)

async def complete_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_user_tasks(user_id)
    
    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏!")
        return
    
    keyboard = []
    for task in tasks:
        task_id, task_text, _, _, _, _ = task
        keyboard.append([InlineKeyboardButton(task_text, callback_data=f"complete_{task_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:", reply_markup=reply_markup)

async def complete_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("complete_"):
        task_id = int(query.data.split("_")[1])
        mark_task_completed(task_id)
        await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ JobQueue
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("addtask", add_task_command))
        application.add_handler(CommandHandler("mytasks", my_tasks_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("complete", complete_task_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler, pattern="^reminder_"))
        application.add_handler(CallbackQueryHandler(complete_button_handler, pattern="^complete_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^\d+$') & ~filters.COMMAND, handle_interval_input))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_text))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(send_reminders(application))
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
