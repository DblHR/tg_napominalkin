import os
import logging
import sqlite3
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ç–æ–∫–µ–Ω –¢–û–õ–¨–ö–û –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

DB_NAME = "tasks.db"
PORT = int(os.environ.get('PORT', 8443))

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            task_text TEXT,
            reminder_type TEXT,
            reminder_interval INTEGER,
            reminder_time TEXT,
            is_completed BOOLEAN DEFAULT FALSE,
            last_reminder_date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def add_task(user_id, task_text, reminder_type, reminder_interval=0, reminder_time=""):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tasks (user_id, task_text, reminder_type, reminder_interval, reminder_time)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, task_text, reminder_type, reminder_interval, reminder_time))
    conn.commit()
    conn.close()
    logger.info(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def get_user_tasks(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, task_text, reminder_type, reminder_interval, reminder_time, is_completed 
        FROM tasks 
        WHERE user_id = ? AND is_completed = FALSE
    ''', (user_id,))
    tasks = cursor.fetchall()
    conn.close()
    return tasks

def mark_task_completed(task_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('UPDATE tasks SET is_completed = TRUE WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()
    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")

def get_tasks_for_reminder():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime('%H:%M')
    current_date = now.strftime('%Y-%m-%d')
    
    cursor.execute('''
        SELECT id, user_id, task_text, reminder_type, reminder_interval, reminder_time, last_reminder_date 
        FROM tasks 
        WHERE is_completed = FALSE
    ''')
    tasks = cursor.fetchall()
    
    tasks_to_remind = []
    for task in tasks:
        task_id, user_id, task_text, reminder_type, interval, specific_time, last_reminder = task
        
        if reminder_type == 'specific_time':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            if current_time == specific_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
                if last_reminder != current_date:
                    tasks_to_remind.append((task_id, user_id, task_text))
                    cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                                 (current_date, task_id))
        
        elif reminder_type == 'custom':
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if last_reminder:
                try:
                    last_reminder_time = datetime.strptime(last_reminder, '%Y-%m-%d %H:%M:%S')
                    time_diff = (now - last_reminder_time).total_seconds() / 60
                    
                    if time_diff >= interval:
                        tasks_to_remind.append((task_id, user_id, task_text))
                        cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                                     (now.strftime('%Y-%m-%d %H:%M:%S'), task_id))
                except ValueError:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    tasks_to_remind.append((task_id, user_id, task_text))
                    cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                                 (now.strftime('%Y-%m-%d %H:%M:%S'), task_id))
            else:
                # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –∂–¥—ë–º –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                             (now.strftime('%Y-%m-%d %H:%M:%S'), task_id))
        
        elif reminder_type == 'once':
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
            if not last_reminder:
                tasks_to_remind.append((task_id, user_id, task_text))
                cursor.execute('UPDATE tasks SET last_reminder_date = ? WHERE id = ?', 
                             (now.strftime('%Y-%m-%d %H:%M:%S'), task_id))
    
    conn.commit()
    conn.close()
    return tasks_to_remind

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ø–∏—Ä–∏–≤–µ—Ç–∞ {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –î—ã–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫\n\n"
        "üìã **–¢—É—Ç –º–æ–∂–Ω–æ:**\n"
        "/addtask - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/mytasks - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        "/complete - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "‚è∞ **–§–æ—Ä–º–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**\n"
        "‚Ä¢ –ß–∏—Å–ª–æ (5, 60, 120) - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö\n"
        "‚Ä¢ –í—Ä–µ–º—è (10:00, 14:30) - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ –º—Å–∫)"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/addtask - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/mytasks - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
/complete - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚è∞ **–¢–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**

üîî **–û–¥–∏–Ω —Ä–∞–∑** - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å

üîÑ **–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º**:
‚Ä¢ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö
‚Ä¢ –ü—Ä–∏–º–µ—Ä: 60 - –∫–∞–∂–¥—ã–π —á–∞—Å, 1440 - —Ä–∞–∑ –≤ –¥–µ–Ω—å

üïê **–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è**:
‚Ä¢ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
‚Ä¢ –ü—Ä–∏–º–µ—Ä: 10:00, 14:30, 09:15
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –º—Å–∫

üö´ **–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π** - –∑–∞–¥–∞—á–∞ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π /addtask
2. –í—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
3. –í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
4. –ù–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏
5. –ü–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!
    """
    await update.message.reply_text(help_text)

async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîî –û–¥–∏–Ω —Ä–∞–∑", callback_data="reminder_once")],
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º", callback_data="reminder_custom")],
        [InlineKeyboardButton("üïê –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="reminder_time")],
        [InlineKeyboardButton("üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_none")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "reminder_once":
        context.user_data['reminder_type'] = "once"
        await query.edit_message_text(
            "–†–µ–∂–∏–º: üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:"
        )
    
    elif data == "reminder_custom":
        context.user_data['reminder_type'] = "custom"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ú–ò–ù–£–¢–ê–•:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 60 - –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å\n"
            "‚Ä¢ 180 - –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞\n" 
            "‚Ä¢ 1440 - —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ 30 - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"
        )
    
    elif data == "reminder_time":
        context.user_data['reminder_type'] = "specific_time"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 10:00 - –≤ 10 —É—Ç—Ä–∞\n"
            "‚Ä¢ 14:30 - –≤ 2:30 –¥–Ω—è\n"
            "‚Ä¢ 09:15 - –≤ 9:15 —É—Ç—Ä–∞\n"
            "‚Ä¢ 18:45 - –≤ 6:45 –≤–µ—á–µ—Ä–∞"
        )
    
    elif data == "reminder_none":
        context.user_data['reminder_type'] = "none"
        await query.edit_message_text(
            "–†–µ–∂–∏–º: üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:"
        )

async def handle_interval_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('reminder_type') == 'custom':
        user_input = update.message.text
        
        try:
            interval = int(user_input)
            if interval <= 0:
                await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return
            
            context.user_data['reminder_interval'] = interval
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            if interval < 60:
                interval_text = f"–∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω—É—Ç"
            elif interval == 60:
                interval_text = "–∫–∞–∂–¥—ã–π —á–∞—Å"
            elif interval % 60 == 0:
                hours = interval // 60
                interval_text = f"–∫–∞–∂–¥—ã–µ {hours} —á–∞—Å–æ–≤"
            else:
                hours = interval // 60
                minutes = interval % 60
                interval_text = f"–∫–∞–∂–¥—ã–µ {hours}—á {minutes}–º"
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å: {interval_text}\n\n"
                "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:"
            )
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

    elif context.user_data.get('reminder_type') == 'specific_time':
        user_input = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (10:00, 14:30 –∏ —Ç.–¥.)
        time_pattern = r'^(\d{1,2}):(\d{2})$'
        time_match = re.match(time_pattern, user_input)
        
        if time_match:
            hours, minutes = int(time_match.group(1)), int(time_match.group(2))
            if 0 <= hours <= 23 and 0 <= minutes <= 59:
                context.user_data['reminder_time'] = f"{hours:02d}:{minutes:02d}"
                
                await update.message.reply_text(
                    f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hours:02d}:{minutes:02d}\n\n"
                    "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏–º—è –∑–∞–¥–∞—á–∏:"
                )
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è! –ß–∞—Å—ã (0-23), –º–∏–Ω—É—Ç—ã (0-59). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 10:00, 14:30, 09:15\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )

async def handle_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'reminder_type' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /addtask")
        return
    
    task_text = update.message.text
    user_id = update.effective_user.id
    reminder_type = context.user_data['reminder_type']
    reminder_interval = context.user_data.get('reminder_interval', 0)
    reminder_time = context.user_data.get('reminder_time', "")
    
    add_task(user_id, task_text, reminder_type, reminder_interval, reminder_time)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    if reminder_type == "once":
        reminder_info = "üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑"
    elif reminder_type == "custom":
        if reminder_interval < 60:
            reminder_info = f"üîÑ –ö–∞–∂–¥—ã–µ {reminder_interval} –º–∏–Ω—É—Ç"
        elif reminder_interval == 60:
            reminder_info = "üîÑ –ö–∞–∂–¥—ã–π —á–∞—Å"
        else:
            hours = reminder_interval // 60
            reminder_info = f"üîÑ –ö–∞–∂–¥—ã–µ {hours} —á–∞—Å–æ–≤"
    elif reminder_type == "specific_time":
        reminder_info = f"üïê –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {reminder_time}"
    else:
        reminder_info = "üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üìù –ó–∞–¥–∞—á–∞: {task_text}\n"
        f"‚è∞ –†–µ–∂–∏–º: {reminder_info}"
    )

async def my_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_user_tasks(user_id)
    
    if not tasks:
        await update.message.reply_text("üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    
    tasks_text = "üìã **–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:**\n\n"
    for i, task in enumerate(tasks, 1):
        task_id, task_text, reminder_type, interval, specific_time, completed = task
        
        if reminder_type == "once":
            reminder_info = "üîî –û–¥–∏–Ω —Ä–∞–∑"
        elif reminder_type == "custom":
            if interval < 60:
                reminder_info = f"üîÑ –ö–∞–∂–¥—ã–µ {interval} –º–∏–Ω"
            elif interval == 60:
                reminder_info = "üîÑ –ö–∞–∂–¥—ã–π —á–∞—Å"
            else:
                hours = interval // 60
                reminder_info = f"üîÑ –ö–∞–∂–¥—ã–µ {hours} —á"
        elif reminder_type == "specific_time":
            reminder_info = f"üïê –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {specific_time}"
        else:
            reminder_info = "üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        tasks_text += f"{i}. {task_text}\n   {reminder_info}\n\n"
    
    tasks_text += "–ò—Å–ø–æ–ª—å–∑—É–π /complete —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
    await update.message.reply_text(tasks_text)

async def complete_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_user_tasks(user_id)
    
    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏!")
        return
    
    keyboard = []
    for task in tasks:
        task_id, task_text, _, _, _, _ = task
        keyboard.append([InlineKeyboardButton(task_text, callback_data=f"complete_{task_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:", reply_markup=reply_markup)

async def complete_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("complete_"):
        task_id = int(query.data.split("_")[1])
        mark_task_completed(task_id)
        await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!")

# –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    tasks = get_tasks_for_reminder()
    
    for task in tasks:
        task_id, user_id, task_text = task
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n{task_text}\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π /complete —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
            )
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ü–æ–ª—É—á–∞–µ–º job_queue
    job_queue = application.job_queue
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addtask", add_task_command))
    application.add_handler(CommandHandler("mytasks", my_tasks_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("complete", complete_task_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^reminder_"))
    application.add_handler(CallbackQueryHandler(complete_button_handler, pattern="^complete_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^\d+$') & ~filters.COMMAND, handle_interval_input))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_text))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
    if job_queue:
        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥, –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        job_queue.run_repeating(send_reminders, interval=60, first=60)
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞! –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.")
    else:
        logger.info("‚ö†Ô∏è Job queue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
    
    # –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook –≤–º–µ—Å—Ç–æ polling
    webhook_url = os.environ.get('RAILWAY_STATIC_URL')
    if webhook_url:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=f"{webhook_url}/{BOT_TOKEN}"
        )
    else:
        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        application.run_polling()

if __name__ == "__main__":
    main()